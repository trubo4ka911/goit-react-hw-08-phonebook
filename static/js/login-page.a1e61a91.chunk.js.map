{"version":3,"file":"static/js/login-page.a1e61a91.chunk.js","mappings":"4LAEe,SAASA,EAAT,GACb,OADyC,EAAXC,SAE5B,KAAK,IACHC,EAAAA,GAAAA,MAAY,gCACZ,MACF,KAAK,IACHA,EAAAA,GAAAA,MAAY,qCACZ,MACF,KAAK,IACHA,EAAAA,GAAAA,MAAY,4DACZ,MACF,QACEA,EAAAA,GAAAA,MAAY,MAEhB,OAAO,SAAC,KAAD,CAAgBC,SAAS,aAAaC,UAAW,IAAMC,MAAO,M,mFC8CvE,IA3DiB,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAClD,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KASA,OACE,UAAC,IAAD,CAAWC,UAAU,YAArB,WACE,eAAIA,UAAU,OAAd,SAAsBX,KACtB,UAAC,IAAD,CAAMY,SAVW,SAAAC,GACnBA,EAAEC,iBACFZ,EAAYG,EAAOE,EAAUE,GAC7BH,EAAS,IACTE,EAAY,IACZE,EAAQ,KAKN,WACE,UAAC,UAAD,CAAYC,UAAU,OAAtB,WACE,SAAC,UAAD,6BACA,SAAC,YAAD,CACEI,KAAK,QACLC,MAAOX,EACPY,YAAY,cACZC,SAAU,SAAAL,GAAC,OAAIP,EAASO,EAAEM,OAAOH,QACjCI,QAAQ,yFACRC,UAAQ,OAGXlB,IACC,UAAC,UAAD,CAAYQ,UAAU,OAAtB,WACE,SAAC,UAAD,oBACA,SAAC,YAAD,CACEI,KAAK,OACLC,MAAOP,EACPQ,YAAY,YACZC,SAAU,SAAAL,GAAC,OAAIH,EAAQG,EAAEM,OAAOH,QAChCK,UAAQ,QAKd,UAAC,UAAD,CAAYV,UAAU,OAAtB,WACE,SAAC,UAAD,wBACA,SAAC,YAAD,CACEI,KAAK,WACLC,MAAOT,EACPU,YAAY,WACZC,SAAU,SAAAL,GAAC,OAAIL,EAAYK,EAAEM,OAAOH,QACpCI,QAAQ,uCACRpB,MAAM,+GACNqB,UAAQ,QAGZ,SAAC,IAAD,CAAQC,QAAQ,UAAUP,KAAK,SAA/B,SACGd,Y,qFCtDI,SAASsB,IAEtB,OACE,gBAAKC,MAFO,CAAE3B,SAAU,QAAS4B,IAAK,MAAOC,KAAM,MAAOC,UAAW,yBAErE,UACA,SAAC,IAAD,CACEC,MAAM,UACNC,KAAM,S,0ICYZ,EAhBc,WACZ,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAACC,EAAA,EAAD,CACEhC,MAAM,aACNE,YAPqB,SAACG,EAAOE,GAC/BuB,EAASG,EAAAA,EAAAA,MAAqB,CAAE5B,MAAAA,EAAOE,SAAAA,MAOrCJ,YAAY,EACZF,WAAW,Y,oBCRF,SAASiC,IACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,YACxBC,GAAQF,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,UAC1B,OACE,UAACE,EAAA,EAAD,YACE,SAAC,EAAD,IACCJ,IAAa,SAACZ,EAAA,EAAD,CAASZ,UAAU,SAChC2B,IAAS,SAAC5C,EAAA,EAAD,CAAOC,QAAS2C,KAC1B,eAAG3B,UAAU,OAAb,kCACsB,SAAC,EAAA6B,KAAD,CAAMC,GAAG,WAAT","sources":["components/Error.jsx","components/Form/FormAuth.js","components/Loading.jsx","components/Login.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { ToastContainer, toast } from 'react-toastify';\r\n\r\nexport default function Error({ message }) {\r\n  switch (message) {\r\n    case 400:\r\n      toast.error('Login error. Please re-login');\r\n      break;\r\n    case 401:\r\n      toast.error('Unauthorized. Please authenticate');\r\n      break;\r\n    case 500:\r\n      toast.error('Server is not available. Please retry your request later');\r\n      break;\r\n    default:\r\n      toast.error(null);\r\n  }\r\n  return <ToastContainer position=\"top-center\" autoClose={3000} limit={1} />;\r\n}","import { useState } from 'react';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\n\r\nconst FormAuth = ({ title, buttonName, handleClick, isRegister }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState('');\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    handleClick(email, password, name);\r\n    setEmail('');\r\n    setPassword('');\r\n    setName('');\r\n  };\r\n  return (\r\n    <Container className=\"mt-4 mb-5\">\r\n      <h1 className=\"mb-5\">{title}</h1>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            value={email}\r\n            placeholder=\"Enter email\"\r\n            onChange={e => setEmail(e.target.value)}\r\n            pattern=\"^[^а-я]+@[^а-я]+\\.[^а-я\\._'+;*^&=?~{}\\-\\.\\/,\\\\]+$\"\r\n            required\r\n          />\r\n        </Form.Group>\r\n        {isRegister && (\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={name}\r\n              placeholder=\"Your name\"\r\n              onChange={e => setName(e.target.value)}\r\n              required\r\n            />\r\n          </Form.Group>\r\n        )}\r\n\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            value={password}\r\n            placeholder=\"Password\"\r\n            onChange={e => setPassword(e.target.value)}\r\n            pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\r\n            title=\"The password must contain 8 or more characters with at least one number, and one upper and lower case letter\"\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          {buttonName}\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\nexport default FormAuth;","import PropagateLoader from 'react-spinners/PropagateLoader';\r\n\r\nexport default function Loading() {\r\n  const style = { position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" };\r\n  return (\r\n    <div style={style}>\r\n    <PropagateLoader\r\n      color=\"#45d583\"\r\n      size={20}\r\n    />\r\n    </div>\r\n  );\r\n}","import { useDispatch } from 'react-redux';\r\nimport FormAuth from './Form/FormAuth';\r\nimport authOperations from 'redux/auth/authOperations';\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmitForm = (email, password) => {\r\n    dispatch(authOperations.logIn({ email, password }));\r\n  };\r\n\r\n  return (\r\n    <FormAuth\r\n      title=\"Login Page\"\r\n      handleClick={handleSubmitForm}\r\n      isRegister={false}\r\n      buttonName=\"Log in\"\r\n    />\r\n  );\r\n};\r\nexport default Login;","import { useSelector } from 'react-redux';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport authSelectors from 'redux/auth/authSelectors';\r\nimport Login from '../components/Login';\r\nimport Loading from 'components/Loading';\r\nimport Error from 'components/Error';\r\n\r\nexport default function LoginPage() {\r\n  const isLoading = useSelector(authSelectors.getLoading);\r\n  const error = useSelector(authSelectors.getError);\r\n  return (\r\n    <Container>\r\n      <Login />\r\n      {isLoading && <Loading className=\"ms-3\" />}\r\n      {error && <Error message={error} />}\r\n      <p className=\"ms-3\">\r\n        Not registered yet? <Link to=\"register\">Click me</Link>\r\n      </p>\r\n    </Container>\r\n  );\r\n}\r\n\r\n\r\n// import { Container } from 'react-bootstrap';\r\n// import { useSelector } from 'react-redux';\r\n// import { Link } from 'react-router-dom';\r\n// import authSelectors from 'redux/auth/authSelectors';\r\n\r\n// export default function HomePage() {\r\n//   const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n//   const name = useSelector(authSelectors.getUsername);\r\n//   return (\r\n//     <Container className=\"mt-4\">\r\n//       {isLoggedIn ? (\r\n//         <h1>\r\n//           Welcome, {name}. To work with contacts go to\r\n//           <Link className=\"text-decoration-none\" to=\"contacts\">\r\n//             {' '}\r\n//             Contacts\r\n//           </Link>\r\n//         </h1>\r\n//       ) : (\r\n//         <>\r\n//           <h1>Hello</h1>\r\n//           <p>\r\n//             To use the application, you must{' '}\r\n//             <Link className=\"text-decoration-none\" to=\"register\">\r\n//               register\r\n//             </Link>{' '}\r\n//             or{' '}\r\n//             <Link className=\"text-decoration-none\" to=\"login\">\r\n//               login\r\n//             </Link>\r\n//           </p>\r\n//         </>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// }"],"names":["Error","message","toast","position","autoClose","limit","title","buttonName","handleClick","isRegister","useState","email","setEmail","password","setPassword","name","setName","className","onSubmit","e","preventDefault","type","value","placeholder","onChange","target","pattern","required","variant","Loading","style","top","left","transform","color","size","dispatch","useDispatch","FormAuth","authOperations","LoginPage","isLoading","useSelector","authSelectors","error","Container","Link","to"],"sourceRoot":""}